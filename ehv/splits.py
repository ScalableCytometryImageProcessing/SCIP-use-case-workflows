# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/1c_generate_splits.ipynb (unless otherwise specified).

__all__ = ['standardizer', 'preprocess_funcs']

# Cell
# export

import pandas
import os
import numpy
import seaborn
import logging
import matplotlib.pyplot as plt
from importlib import reload
from ehv import core

numpy.random.seed(42)

# Cell

from sklearn.model_selection import StratifiedKFold, PredefinedSplit
from collections import Counter
import matplotlib.pyplot as plt
from joblib import load, dump
from ehv import load
from functools import partial

# Cell

def standardizer(X, mean, std=1.0):
    return (X-mean)/std

# Cell

def preprocess_funcs(df, target, outer_fold, inner_folds):

    outer_fold_funcs = []
    inner_fold_funcs = []

    for i, (train_idx, _) in enumerate(PredefinedSplit(outer_fold).split()):

        X = df.iloc[train_idx]
        y = target.iloc[train_idx]

        outer_fold_funcs.append((
            partial(standardizer, mean=X.mean(), std=X.std()),
            partial(standardizer, mean=y.mean())
        ))

        for inner_fold in inner_folds[i]:
            tmp = []
            for nested_train_idx, _ in PredefinedSplit(inner_fold).split():

                X_train = X.iloc[nested_train_idx]
                mean, std = X.mean(), X.std()

                y_mean = y.iloc[nested_train_idx].mean()

                tmp.append((
                    partial(standardizer, mean=mean, std=std),
                    partial(standardizer, mean=y_mean)
                ))

            inner_fold_funcs.append(tmp)

    return outer_fold_funcs, inner_fold_funcs