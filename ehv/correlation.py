# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/2c_selected_features_correlation_analysis.ipynb (unless otherwise specified).

__all__ = ['Correlation']

# Cell
# export

import pandas
import os
import numpy
import seaborn
import logging
import matplotlib.pyplot as plt
from matplotlib import cm
from importlib import reload
from ehv import core
from joblib import load, dump
from pathlib import Path
import uuid
import re
import scipy

from ehv import load as e_load, core

plt.rcParams['figure.facecolor'] = 'white'

numpy.random.seed(42)

# Cell
import copy
from sklearn.base import clone, BaseEstimator, TransformerMixin

# Cell
class Correlation(BaseEstimator, TransformerMixin):

    def __init__(self, thresh):
        self.thresh = thresh

    def fit(self, df):
        correlation, var = df.corr(), df.var()
        drops, keeps = list(), list()

        # loop over all feature combinations
        for i in range(correlation.shape[0]):
            for j in range(i):

                # check absolute value of correlation against threshold
                if abs(correlation.iloc[i, j]) > self.thresh:

                    # keep feature with most variance
                    drop = i if var[correlation.columns[i]] >= var[correlation.columns[j]] else j
                    keep = j if drop == i else i
                    drops.append(correlation.columns[drop])
                    keeps.append(correlation.columns[keep])

        self.correlated = set(drops)
        self.combinations = list(zip(drops, keeps))
        return self

    def transform(self, df):
        return df.drop(columns=self.correlated)