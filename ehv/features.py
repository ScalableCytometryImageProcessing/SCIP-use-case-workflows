# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/2c_other_features_preprocessing.ipynb (unless otherwise specified).

__all__ = ['umap_per_set', 'outliers_per_set']

# Cell
# export

import pandas
import os
import numpy
import seaborn
import logging
import matplotlib.pyplot as plt
from importlib import reload

numpy.random.seed(42)

# Cell

from ehv import load
import ppscore
import fcswrite
reload(load)

# Cell

def umap_per_set(df, meta_df):
    umaps = []
    for (t_idx, r_idx), grouped_df in df.groupby([meta_df["timepoint"], meta_df["replicate"]]):

        print(f"{t_idx} - {r_idx}")

        res_df = pandas.DataFrame(umap.UMAP().fit_transform(grouped_df), columns=["dim_1", "dim_2"])
        res_df["timepoint"] = t_idx
        res_df["replicate"] = r_idx

        umaps.append(res_df)

    return pandas.concat(umaps)

# Cell

def outliers_per_set(df, meta_df, umaps):

    iso_forest = IsolationForest()

    for (t_idx, r_idx), grouped_df in df.groupby([meta_df["timepoint"], meta_df["replicate"]]):
        preds = iso_forest.fit_predict(grouped_df)

        n_outliers = (preds==-1).sum()
        print(f"Isolation Forest identified {n_outliers} ({n_outliers/grouped_df.shape[1]:.2f}%) in {t_idx}, {r_idx}")

        umaps.loc[(umaps["timepoint"]==t_idx) & (umaps["replicate"]==r_idx), "outlier"] = preds