# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/1a_load.ipynb (unless otherwise specified).

__all__ = ['load_raw_ideas', 'remove_unwanted_features']

# Cell
# export

import pandas
import os
import numpy
import seaborn
import logging

# Cell
import fcsparser

# Cell

def load_raw_ideas(tree_path, load_labels=False):

    data = []
    columns = set()

    for timepoint_path in os.listdir(tree_path):
        for replicate_path in os.listdir(os.path.join(tree_path, timepoint_path)):
            path = os.path.join(tree_path, timepoint_path, replicate_path)

            if not os.path.isfile(os.path.join(path, "focused.fcs")):
                continue

            logging.info(f"Loading dir {path}")

            meta, features = fcsparser.parse(os.path.join(path, "focused.fcs"))
            features = features.set_index("Object Number")
            features.index = features.index.astype(numpy.uint64)
            features["timepoint"] = timepoint_path
            features["replicate"] = replicate_path

            if load_labels:
                features["label"] = "unknown"
                for file in [p for p in os.listdir(path) if p.endswith(".txt")]:
                    label = os.path.splitext(file)[0]
                    object_numbers = pandas.read_csv(os.path.join(path, file), skiprows=1, delimiter="\t", index_col=0).index
                    features.loc[object_numbers, "label"] = label

            logging.debug(f"Loaded dataframe with shape {features.shape}")

            if len(columns) == 0:
                columns |= set(features.columns.values.tolist())
            else:
                columns &= set(features.columns.values.tolist())

            data.append(features)

    return pandas.concat(data)[columns]

# Cell
def remove_unwanted_features(df):
    todrop = df.filter(regex="(?i).*(raw|bkgd).*").columns

    return df.drop(columns=todrop)