# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/3c_viral_infection_progression.ipynb (unless otherwise specified).

__all__ = ['get_logicle_xform', 'logicle_transform']

# Cell
# export

import pandas
import os
import numpy
import seaborn
import logging
import matplotlib.pyplot as plt
from matplotlib import cm
from importlib import reload
from ehv import core
from joblib import load, dump
from pathlib import Path
import uuid

plt.rcParams['figure.facecolor'] = 'white'

numpy.random.seed(42)

# Cell
from ehv import load as e_load
from pathlib import Path
import flowkit
import re

# Cell

def get_logicle_xform(series):
    M = 4.5
    T = max(series)
    r = series[series < 0].quantile(0.05)
    if r == numpy.nan:
        r = 1

    if T > 0:
        W = (M - numpy.log(T/abs(r)))/2
    else:
        W = 1.5

    print(M, T, r, W)

    return flowkit.transforms.LogicleTransform('logicle', param_t=T, param_w=W, param_m=M, param_a=0)

def logicle_transform(df):
    samples = []
    for (t_idx, r_idx), gdf in df.groupby(["meta_timepoint", "meta_replicate"]):
        xform = get_logicle_xform(df["feat_intensity_mc_ch7"])
        sample = flowkit.Sample(gdf[["feat_intensity_mc_ch04", "feat_intensity_mc_ch11", "feat_intensity_mc_ch7"]])
        sample.apply_transform(xform)
        sample_df = sample.as_dataframe(source="xform").set_index(gdf.index)
        sample_df.columns = [col+"_logicle" for col in sample_df.columns.get_level_values(0)]
        samples.append(sample_df)

    return pandas.concat(samples)