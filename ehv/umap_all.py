# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/3b_umap_reduction_of_all_COI.ipynb (unless otherwise specified).

__all__ = ['knn_umap_plot']

# Cell
# export

import pandas
import os
import numpy
import seaborn
import logging
import matplotlib.pyplot as plt
from importlib import reload
from ehv import core
from joblib import load, dump
from pathlib import Path

plt.rcParams['figure.facecolor'] = 'white'

numpy.random.seed(42)

# Cell
import umap
import dask.dataframe as dd
from ehv import core, load as e_load, correlation
from joblib import dump, load
from pathlib import Path
from matplotlib import cm
import matplotlib
import statsmodels.api as sm
import uuid
from matplotlib import cm
from sklearn.neighbors import kneighbors_graph
import scipy.spatial.distance
import scipy.sparse
from sklearn.preprocessing import scale, robust_scale, minmax_scale
from sklearn.feature_selection import VarianceThreshold

# Cell
def knn_umap_plot(df, ax, fig=None, colorbar=True, cmap="cool", metric="cosine"):
    knn = scipy.sparse.tril(kneighbors_graph(df.filter(regex="feat"), n_jobs=-1, n_neighbors=5, metric=metric)).toarray()
    dists = scipy.spatial.distance.squareform(scipy.spatial.distance.pdist(df[["dim_1", "dim_2"]], "euclidean"))

    norm = matplotlib.colors.Normalize(vmin=dists.min(), vmax=dists.max())
    cmap = cm.get_cmap(cmap)
    for i in range(knn.shape[0]):
        for j in knn[i].nonzero()[0]:
            xx = [df.iloc[i]["dim_1"], df.iloc[j]["dim_1"]]
            yy = [df.iloc[i]["dim_2"], df.iloc[j]["dim_2"]]
            ax.plot(xx, yy, alpha=0.2, c=cmap(norm(dists[i, j])), linewidth=.5)

    if colorbar:
        fig.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax)